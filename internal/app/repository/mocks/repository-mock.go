// Code generated by MockGen. DO NOT EDIT.
// Source: movie_rental_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	dto "github.com/RadhaGeethikaKandala/MovieRental/internal/app/dto"
	request "github.com/RadhaGeethikaKandala/MovieRental/internal/app/dto/request"
	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateQuery mocks base method.
func (m *MockRepository) CreateQuery(movieRequest *request.MoviesRequest) (string, []string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateQuery", movieRequest)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]string)
	return ret0, ret1
}

// CreateQuery indicates an expected call of CreateQuery.
func (mr *MockRepositoryMockRecorder) CreateQuery(movieRequest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQuery", reflect.TypeOf((*MockRepository)(nil).CreateQuery), movieRequest)
}

// GetMovies mocks base method.
func (m *MockRepository) GetMovies(query string, params []string) []dto.Movie {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMovies", query, params)
	ret0, _ := ret[0].([]dto.Movie)
	return ret0
}

// GetMovies indicates an expected call of GetMovies.
func (mr *MockRepositoryMockRecorder) GetMovies(query, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovies", reflect.TypeOf((*MockRepository)(nil).GetMovies), query, params)
}

// GetRatingsFor mocks base method.
func (m *MockRepository) GetRatingsFor(movieId int) []dto.Rating {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRatingsFor", movieId)
	ret0, _ := ret[0].([]dto.Rating)
	return ret0
}

// GetRatingsFor indicates an expected call of GetRatingsFor.
func (mr *MockRepositoryMockRecorder) GetRatingsFor(movieId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRatingsFor", reflect.TypeOf((*MockRepository)(nil).GetRatingsFor), movieId)
}
